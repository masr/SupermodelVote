/** * @author:Abraham[abraham1@163.com] * 一些常用的函数、类库 * 由Abraham编写或收集 * Email:abraham1@163.com * *//*** * clear all elements of this array, make this array empty */Array.prototype.clear = function(){    var len = this.length;    for (var i = 0; i < len; i++)         this.pop();}if (typeof Array.prototype.indexOf === 'undefined') {    /***     *     * @param {Object} value     * @return {Number}     */    Array.prototype.indexOf = function(value){        for (var i = 0; i < this.length; i++)             if (this[i] === value)                 return i;        return -1;    }}Array.prototype.removeAt = function(index){    if (typeof index !== 'number' || index >= this.length || index < 0)         return false;    this.splice(index, 1);    return true;}/** * * @param {Object} baseType * @param {Array} args */Object.prototype.initializeBase = function(baseType, args){    if (!(args instanceof Array) || args.length !== 0) {        baseType.apply(this, args);    }    else {        baseType.call(this);    }}/** * 深拷贝对象 */Object.prototype.clone = function(){    var rtn = {};    for (var k in this) {        rtn[k] = this[k];    }    return rtn;}function makeInherits(inheritType, baseType){    for (var pFunc in baseType.prototype) {        var sp = inheritType.prototype[pFunc];        if (typeof sp === 'undefined') {            inheritType.prototype[pFunc] = baseType.prototype[pFunc];        }    }    /**     *     * @param {Object} instance     * @param {string} method     * @param {Array} args     */    inheritType.callBaseMethod = function(instance, method, args){        var med = baseType.prototype[method];        if (typeof med === 'function') {            if (!(args instanceof Array) || args.length === 0)                 med.call(instance);            else                 med.apply(instance, args);        }    }}function get$(id){    return document.getElementById(id);}function createDelegate(instance, method){    return function(){        method.apply(instance, arguments);    }}function AddCssClass(element, cssClassName){    try {        var clsName = element.className;        var reg = new RegExp("\\b" + cssClassName + "\\b");        if (reg.test(clsName) === false) {            element.className += (' ' + cssClassName);        }    }     catch (e) {        debug.print(e.message);    }}function RemoveCssClass(element, cssClassName){    try {        var reg = new RegExp('\\b' + cssClassName + '\\b')        element.className = element.className.replace(reg, '');    }     catch (e) {        debug.print(e.message);    }}var debug = {    print: function(msg){        if (typeof console != 'undefined') {            console.log(msg)        }    },    msgbox: function(msg){        if (typeof msg === 'object') {            var newmsg = '{ ';            for (var k in msg) {                if (typeof msg[k] !== 'function')                     newmsg += (k + '=' + msg[k] + ' ');            }            newmsg += '}';            alert(newmsg);        }        else             alert(msg);    },    assert: function(expression){        console.assert(expression);    }}var elementEventsTable = {};function h_f(handler, func){    this.handler = handler;    this.func = func;}function AddEvent(element, event, handler){    var id = element.id;    if (typeof id === 'undefined') {        id = Math.random();        element.id = id;    }    if (typeof elementEventsTable[id] === 'undefined')         elementEventsTable[id] = {};    var et = elementEventsTable[id];    if (typeof et[event] === 'undefined')         et[event] = new Array();    var es = et[event];    if (findFunc(es, handler) === null) {        var func = null;        if (element.attachEvent) {            func = function(){                handler(CreateEventArg(null));            };            element.attachEvent('on' + event, func)        }        else {            func = function(event){                handler(CreateEventArg(event));            }            element.addEventListener(event, func, false);        }        es.push(new h_f(handler, func));        return true;    }    return false;}function findFunc(es, handler){    for (var i = 0; i < es.length; i++) {        if (es[i].handler === handler)             return es[i];    }    return null;}function RemoveEvent(element, event, handler){    var id = element.id;    if (typeof id === 'undefined')         return false;    if (typeof elementEventsTable[id] === 'undefined')         return false;    var et = elementEventsTable[id];    if (typeof et[event] === 'undefined')         return false;    var es = et[event];    var hf = findFunc(es, handler);    if (hf === null)         return false;    es.removeAt(es.indexOf(hf));    if (es.length === 0) {        delete elementEventsTable[id].event;    }    if (element.detachEvent) {        element.detachEvent('on' + event, hf.func);    }    else         if (element.removeEventListener) {            element.removeEventListener(event, hf.func, false);        }    //debug.print("remove "+handler.name+" on "+event+" of elem:"+element.id);}function RemoveAllEvents(element){    var id = element.id;    if (typeof id === 'undefined')         return false;    if (typeof elementEventsTable[id] === 'undefined')         return;    var et = elementEventsTable[id];    for (var event in et) {        var es = et[event];        if (!(es instanceof Array))             break;        for (var i = 0; i < es.length; i++) {            if (element.detachEvent) {                element.detachEvent('on' + event, es[i].func);            }            else                 if (element.removeEventListener) {                    element.removeEventListener(event, es[i].func, false);                }            //	debug.print('remove '+es[i].handler.name+" on "+event+" from element:"+id);        }    }    delete elementEventsTable.id;}function CreateEventArg(e){    var l, r, m;    if (e === null) {        l = 1;        r = 2;        m = 4        e = window.event    }    else {        l = 0;        r = 2;        m = 1;    };    var btn = e.button;    switch (btn) {        case l:            e.buttonName = 'left';            break;        case m:            e.buttonName = 'middle';            break;        case r:            e.buttonName = 'right';            break;    }    e.sender = e.srcElement || e.target;    return e;}String.prototype.trim = function(){    return this.replace(/(^\s*)|(\s*$)/g, "");}var AbeUtility = {    XMLDom: {        getNodeText: function(node){            if (node.textContent)                 return node.textContent;            else                 if (node.text) {                    return node.text;                }                else                     if (node.innerText)                         return node.innerText;        }    },    XMLParser: {        parse: function(text){            try {                if (window.DOMParser) {                    var parser = window.DOMParser();                    return parser.parseFromString(text, 'text/xml');                }                else {                    var xmlDoc = new ActiveXObject("Microsoft.XMLDOM");                    xmlDoc.async = "false";                    xmlDoc.loadXML(text);                    return xmlDoc;                }            }             catch (e) {                debug.print(e.message);                return null;            }        }    }}function GetNodeText(node){    if (node.textContent)         return node.textContent;    else         if (node.text) {            return node.text;        }        else             if (node.innerText)                 return node.innerText;}function _XmlHttpRequestManager(){    this.XMLHttpRequestPool = new Array();}_XmlHttpRequestManager.prototype = {    getInstance: function(){        var i = 0;        //查找XMLHttpRequest对象池中空闲的对象        for (i = 0; i < this.XMLHttpRequestPool.length; i++) {            if (this.XMLHttpRequestPool[i].readyState == 4 || this.XMLHttpRequestPool[i].readyState == 0) {                return this.XMLHttpRequestPool[i];            }        }        //如果没有，创建一个新的        this.XMLHttpRequestPool[i] = this.createRequest();        return this.XMLHttpRequestPool[i];    },    //创建XMLHttpRequest对象，暂时只考虑FF3+,IE7+    createRequest: function(){        if (window.ActiveXObject) {            try {                return new ActiveXObject("Msxml2.XMLHTTP");            }             catch (e) {                try {                    return new ActiveXObject("Microsoft.XMLHTTP");                }                 catch (e1) {                    return null;                }            }        }        else             if (window.XMLHttpRequest) {                return new XMLHttpRequest();            }            else {				alert('xmlhttp 创建失败');                return null;            }            },    sendRequest: function(method, url, data, callBack){        var objXmlHttp = this.getInstance();        with (objXmlHttp) {            try {                open(method, url, true);                if (method == "GET") {                    //对Get方法，增加一个额外的随机数参数，防止IE缓存服务器响应                    if (url.indexOf("?") > 0) {                        url += "&randnum=" + Math.random();                    }                    else {                        url += "?randnum=" + Math.random();                    }                    send(null);                }                else                     if (method == "POST") {                        setRequestHeader("Content-Length", data.length);                        setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');                        send(data);                    }                onreadystatechange = function(){                    if (objXmlHttp.readyState == 4) {                        if (typeof callBack === 'function' && callBack !== null)                             callBack(objXmlHttp);                    }                }                            }             catch (e) {                alert(e);            }        }    }}//创建XMLHttpRequest对象池XMLHttp = new _XmlHttpRequestManager();var AbeGlobal = {};AbeGlobal.topIndex = 9999;AbeGlobal.secondIndex = 8888;AbeGlobal.preZIndex = 0;AbeGlobal.widgetTop = 175;